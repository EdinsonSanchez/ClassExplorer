<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2015.2 (Build 540)" ts="2015-04-28 19:50:48">
<Class name="UMLExplorer.ClassView">
<Description>
Cache UML Explorer vX.X.X/*build.replace:pkg.version*/
Class contains methods that return structured classes/packages data.</Description>
<TimeChanged>63706,86042.410811</TimeChanged>
<TimeCreated>63653,67019.989197</TimeCreated>

<Method name="getAllNamespacesList">
<Description>
Return list with all namespaces</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set resp = ##class(%ZEN.proxyObject).%New()
    set resp.namespaces = ##class(%ZEN.proxyObject).%New()
    set resp.currentNamespace = $NAMESPACE
    set result = ##class(%ResultSet).%New("%SYS.Namespace:List")
    do result.Execute()
    while (result.Next()) {
        set ns = ##class(%ZEN.proxyObject).%New()
        set ns.remote = result.Get("Remote")
        set ns.status = result.Get("Status")
        do resp.namespaces.%DispatchSetProperty(result.Get("Nsp"), ns)
    }
    return resp
]]></Implementation>
</Method>

<Method name="getClassTree">
<Description>
Returns structured class tree with all classes available in current namespace</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    zn:$GET(namespace)'="" namespace
    set resp = ##class(%ZEN.proxyObject).%New()

    set classes = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:Summary")
    set objects = ##class(%Library.ArrayOfObjects).%New()
    set lastParts = $LB()

    set level = 1
    do objects.SetAt(resp, level)


    do classes.Execute()
    while (classes.Next()) {
        set name = classes.Data("Name")
        if ($EXTRACT(name, 1, 1) = "%") && ($NAMESPACE '= "%SYS") { continue }
        set parts = $LISTFROMSTRING(name, ".")
        set i = 0
        while (i < $LISTLENGTH(parts)) && ($LISTGET(lastParts, i + 1) = $LISTGET(parts, i + 1)) {
            set i = i + 1
        }
        set level = i + 1
        set resp = objects.GetAt(level)
        if (resp="") {
            set resp = ##class(%ZEN.proxyObject).%New()
            do objects.GetAt(level - 1).%DispatchSetProperty($LISTGET(parts, level - 1), resp)
            do objects.SetAt(resp, level)
        }
        while ($LISTLENGTH(parts) > level) {
            set level = level + 1
            set resp = ##class(%ZEN.proxyObject).%New()
            do objects.GetAt(level - 1).%DispatchSetProperty($LISTGET(parts, level - 1), resp)
            do objects.SetAt(resp, level)
        }
        if ($LISTLENGTH(parts) = level) {
            do resp.%DispatchSetProperty($LISTGET(parts, level), classes.Data("Hidden"))
        }
        set lastParts = parts
    }

    quit objects.GetAt(1)
]]></Implementation>
</Method>

<Method name="setClassData">
<Description>
Return structured data about class.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oData:%ZEN.proxyObject,className:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set classDefinition = ##class(%Dictionary.ClassDefinition).%OpenId(className)
    if (classDefinition = "") || (oData.classes.%DispatchGetProperty(classDefinition.Name) '= "") quit ""

    set oClass = ##class(%ZEN.proxyObject).%New()
    do oData.classes.%DispatchSetProperty(classDefinition.Name, oClass) // prevent from recursive setup
    set package = $LISTTOSTRING($LIST($LISTFROMSTRING(classDefinition.Name, "."), 1, *-1),".")
    set oProperties = ##class(%ZEN.proxyObject).%New()
    set oClass.super = classDefinition.Super
    set oClass.NAMESPACE = $NAMESPACE
    set oClass.SYSTEM = classDefinition.System
    set oClass.PROCEDUREBLOCK = classDefinition.ProcedureBlock
    set oClass.ABSTRACT = classDefinition.Abstract
    set oClass.FINAL = classDefinition.Final
    set oClass.HIDDEN = classDefinition.Hidden
    set oClass.classType = classDefinition.ClassType
    set oClass.serverOnly = classDefinition.ServerOnly // -
    set oClass.isDataType = classDefinition.ClientDataTypeIsDefined()

    if (oData.restrictPackage) && ('..inPackage(oData.basePackageName, package)) quit oClass

    set oClass.properties = oProperties
    set count = classDefinition.Properties.Count()
    for i=1:1:count {
        set oProp = ##class(%ZEN.proxyObject).%New()
        set p = classDefinition.Properties.GetAt(i)
        do oProperties.%DispatchSetProperty(p.Name, oProp)
        set oProp.private = p.Private
        set oProp.readOnly = p.ReadOnly
        set oProp.type = p.Type
        do ..collectAggregation(oData, classDefinition, p.Type, p.Private)
        do ..collectAggregation(oData, classDefinition, package _ "." _ p.Type, p.Private)
    }

    set oMethods = ##class(%ZEN.proxyObject).%New()
    set oClass.methods = oMethods
    set count = classDefinition.Methods.Count()
    for i=1:1:count {
        set oMeth = ##class(%ZEN.proxyObject).%New()
        set met = classDefinition.Methods.GetAt(i)
        do oMethods.%DispatchSetProperty(met.Name, oMeth)
        set oMeth.private = met.Private
        set oMeth.returns = met.ReturnType
        set oMeth.classMethod = met.ClassMethod
        set oMeth.clientMethod = met.ClientMethod
        set oMeth.final = met.Final
        set oMeth.abstract = met.Abstract
        set oMeth.language = met.Language
        set oMeth.notInheritable = met.NotInheritable
        set oMeth.serverOnly = met.ServerOnly
        set oMeth.sqlProc = met.SqlProc
        set oMeth.sqlName = met.SqlName
        set oMeth.webMethod = met.WebMethod
        set oMeth.zenMethod = met.ZenMethod
    }

    set oParameters = ##class(%ZEN.proxyObject).%New()
    set oClass.parameters = oParameters
    set count = classDefinition.Parameters.Count()
    for i=1:1:count {
        set oPar = ##class(%ZEN.proxyObject).%New()
        set p = classDefinition.Parameters.GetAt(i)
        set oPar.type = p.Type
        do oParameters.%DispatchSetProperty(p.Name, oPar)
    }

    do ..collectInheritance(oData, classDefinition, package)

    quit oClass
]]></Implementation>
</Method>

<Method name="getMethod">
<Description>
Return method data.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String,methodName:%String,namespace:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    zn:$GET(namespace)'="" namespace
    set oMeth = ##class(%ZEN.proxyObject).%New()
    set met = ##class(%Dictionary.MethodDefinition).%OpenId(className _ "||" _ methodName)
    if (met = "") { set oMeth.error = 1 quit oMeth }

    set oMeth.description = met.Description
    set oMeth.arguments = met.FormalSpec
    set oMeth.returns = met.ReturnType
    set oMeth.code = ""
    do {
        set chars = met.Implementation.Read()
        set oMeth.code = oMeth.code _ chars
    } while (chars)

    quit oMeth
]]></Implementation>
</Method>

<Method name="inPackage">
<Description><![CDATA[
Returns if <var>packageName</var> is in <var>basePackageName</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>basePackageName:%String,packageName:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[    quit $FIND(packageName, basePackageName) - $LENGTH(basePackageName) = 1
]]></Implementation>
</Method>

<Method name="extendClassFromType">
<Description>
Wrap registered types to class names</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>typeName:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    return typeName
        /*$CASE(typeName,
        "%String": "%Library.String",
        "%Integer": "%Library.Integer",
        "%DataType": "%Library.DataType",
        "%Status": "%Library.Status",
        "%CacheString": "%Library.CacheString",
        "%Persistent": "%Library.Persistent",
        :typeName)*/
]]></Implementation>
</Method>

<Method name="collectInheritance">
<Description>
Fill inheritance data</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oData:%ZEN.proxyObject,baseClassDefinition:%Dictionary.ClassDefinition,basePack:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set superParts = $LISTFROMSTRING(baseClassDefinition.Super, ",")
    set oInherit = ##class(%ZEN.proxyObject).%New()
    do oData.inheritance.%DispatchSetProperty(baseClassDefinition.Name, oInherit)
    for i=1:1:$LISTLENGTH(superParts) {
        set className = ..extendClassFromType($LISTGET(superParts, i))

        // try to find class with base package, if not successfull - try to add class as it is
        if (..classExists(basePack_"."_className)) {
            set clsName = basePack_"."_className
        } else {
            set clsName = className
        }

        do oInherit.%DispatchSetProperty(clsName, 1)
        do ..setClassData(oData, clsName)
    }
    quit $$$OK
]]></Implementation>
</Method>

<Method name="collectAggregation">
<Description>
Fill aggregation/composition data</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oData:%ZEN.proxyObject,classDef:%Dictionary.ClassDefinition,aggClassName:%String,private:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set aggClassDef = ##class(%Dictionary.ClassDefinition).%OpenId(aggClassName)
    if (aggClassDef '= "") {
        if (private) { set t = "composition" } else { set t = "aggregation" }
        set oAgg = oData.%DispatchGetProperty(t).%DispatchGetProperty(classDef.Name)
        if (oAgg = "") {
            set oAgg = ##class(%ZEN.proxyObject).%New()
            do oData.%DispatchGetProperty(t).%DispatchSetProperty(classDef.Name, oAgg)
        }
    } else { quit $$$OK }

    do oAgg.%DispatchSetProperty(aggClassName, "1..1")
    do ..setClassData(oData, aggClassName)

    quit $$$OK
]]></Implementation>
</Method>

<Method name="getBaseOData">
<Description>
Setup basic output data object</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>packageName:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set oData = ##class(%ZEN.proxyObject).%New()
    set oData.basePackageName = packageName
    set oData.restrictPackage = 1 // expand classes only in base package
    set oData.classes = ##class(%ZEN.proxyObject).%New()
    set oData.inheritance = ##class(%ZEN.proxyObject).%New()
    set oData.aggregation = ##class(%ZEN.proxyObject).%New()
    set oData.composition = ##class(%ZEN.proxyObject).%New()
    quit oData
]]></Implementation>
</Method>

<Method name="classExists">
<Description>
Returns if class with given name exists.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[    quit ##class(%Dictionary.ClassDefinition).%OpenId(className) '= ""
]]></Implementation>
</Method>

<Method name="getClassView">
<Description>
Returns structured class data</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String,namespace:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    zn:$GET(namespace)'="" namespace
    set package = $LISTTOSTRING($LIST($LISTFROMSTRING(className, "."), 1, *-1), ".")
    set oData = ..getBaseOData(package)
    do ..setClassData(oData, className)
    quit oData
]]></Implementation>
</Method>

<Method name="getPackageView">
<Description>
Returns structured package data</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>rootPackageName:%String,namespace:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    zn:$GET(namespace)'="" namespace
    set oData = ..getBaseOData(rootPackageName)
    set classes = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:Summary")
    do classes.Execute()
    set listLen = $LISTLENGTH($LISTFROMSTRING(rootPackageName, ".")) // bottom level of package to extract

    while (classes.Next()) {
        set className = classes.Data("Name")
        set packageName = $LISTTOSTRING($LIST($LISTFROMSTRING(className, "."), 1, listLen), ".")
        if (packageName = rootPackageName) {
            do ..setClassData(oData, className)
        }
    }

    quit oData
]]></Implementation>
</Method>
</Class>


<Project name="UMLExplorer" LastModified="2015-05-24 18:14:48.579613">
  <Items>
    <ProjectItem name="UMLExplorer.ClassView" type="CLS"></ProjectItem>
    <ProjectItem name="UMLExplorer.Router" type="CLS"></ProjectItem>
    <ProjectItem name="UMLExplorer.StaticContent" type="CLS"></ProjectItem>
    <ProjectItem name="UMLExplorer.WebAppInstaller" type="CLS"></ProjectItem>
  </Items>
</Project>


<Class name="UMLExplorer.Router">
<Description>
REST interface for UMLExplorer</Description>
<Super>%CSP.REST</Super>
<TimeChanged>63697,73073.878177</TimeChanged>
<TimeCreated>63648,30450.187229</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
   <Route Url="/" Method="GET" Call="Index"/>
   <Route Url="/index" Method="GET" Call="Index"/>
   <Route Url="/css/CacheUMLExplorer.css" Method="GET" Call="GetCss"/>
   <Route Url="/js/CacheUMLExplorer.js" Method="GET" Call="GetJs"/>
   <Route Url="/Test" Method="GET" Call="Test"/>
   <Route Url="/GetClassTree" Method="GET" Call="GetClassTree"/>
   <Route Url="/GetClassView" Method="GET" Call="GetClassView"/>
   <Route Url="/GetAllNamespacesList" Method="GET" Call="GetAllNamespacesList"/>
   <Route Url="/GetPackageView" Method="GET" Call="GetPackageView"/>
   <Route Url="/GetMethod" Method="GET" Call="GetMethod"/>
</Routes>
]]></Data>
</XData>

<Method name="GetClassTree">
<Description>
Method returns whole class tree visible in the current namespace.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ##class(UMLExplorer.ClassView).getClassTree(%request.Get("namespace")).%ToJSON(, "o")
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetClassView">
<Description>
Returns classTree by given class name</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set className = %request.Get("name")
    set classData = ##class(ClassView).getClassView(className, %request.Get("namespace"))
    do classData.%ToJSON(, "o")
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetPackageView">
<Description>
Returns all package class trees by given package name</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set packageName = %request.Get("name")
    set classData = ##class(ClassView).getPackageView(packageName, %request.Get("namespace"))
    do classData.%ToJSON(, "o")
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetAllNamespacesList">
<Description>
Return the list of all namespaces</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ##class(UMLExplorer.ClassView).getAllNamespacesList().%ToJSON(, "o")
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetMethod">
<Description>
Returns method description and code</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set className = %request.Get("className")
    set methodName = %request.Get("methodName")
    set methodData = ##class(ClassView).getMethod(className, methodName, %request.Get("namespace"))
    do methodData.%ToJSON(, "o")
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetCss">
<Description>
Method returns user application CSS.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#define CompileTime ##Expression("""" _ $zd($h, 11) _ ", "_ $zdt($NOW(0), 2,1) _ " GMT""")
    set %response.CharSet = "utf-8"
    set %response.ContentType = "text/css"
    do %response.SetHeader("Last-Modified", $$$CompileTime)
   
    if %request.GetCgiEnv("HTTP_IF_MODIFIED_SINCE")=$$$CompileTime {
	    do ..Http304()
    } else {
	    do ##class(StaticContent).Write("CSS")
    }
    
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetJs">
<Description>
Method returns user application JavaScript.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#define CompileTime ##Expression("""" _ $zd($h, 11) _ ", "_ $zdt($NOW(0), 2,1) _ " GMT""")
    set %response.CharSet = "utf-8"
    set %response.ContentType = "text/javascript"
    do %response.SetHeader("Last-Modified", $$$CompileTime)
    
    if %request.GetCgiEnv("HTTP_IF_MODIFIED_SINCE")=$$$CompileTime {
	    do ..Http304()
    } else {
	    do ##class(StaticContent).Write("JS")
    }
    
    return $$$OK
]]></Implementation>
</Method>

<Method name="Index">
<Description>
Method returns user application HTML.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#define CompileTime ##Expression("""" _ $zd($h, 11) _ ", "_ $zdt($NOW(0), 2,1) _ " GMT""")
	do %response.SetHeader("Last-Modified", $$$CompileTime)
        
    if %request.GetCgiEnv("HTTP_IF_MODIFIED_SINCE")=$$$CompileTime {
	    do ..Http304()
    } else {
	    do ##class(StaticContent).Write("HTML")
    }
    
    return $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="UMLExplorer.StaticContent">
<TimeChanged>63670,71368.846177</TimeChanged>
<TimeCreated>63663,71456.865723</TimeCreated>

<Method name="Write">
<Description>
Write the contents of xData tag</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Const:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set xdata = ##class(%Dictionary.CompiledXData).%OpenId("UMLExplorer.StaticContent||"_Const).Data
    set status=##class(%XML.TextReader).ParseStream(xdata, .textreader)
    while textreader.Read() { if (textreader.NodeType="chars") { w textreader.Value } }
    return $$$OK
]]></Implementation>
</Method>

<XData name="HTML">
<Data><![CDATA[
<data><![CDATA[
{{replace:html}}
]]]]><![CDATA[></data>
]]></Data>
</XData>

<XData name="CSS">
<Data><![CDATA[
<data><![CDATA[
{{replace:css}}
]]]]><![CDATA[></data>
]]></Data>
</XData>

<XData name="JS">
<Data><![CDATA[
<data><![CDATA[
{{replace:js}}
]]]]><![CDATA[></data>
]]></Data>
</XData>
</Class>


<Class name="UMLExplorer.WebAppInstaller">
<Super>%Projection.AbstractProjection</Super>
<TimeChanged>63696,65168.289869</TimeChanged>
<TimeCreated>63696,64041.85537</TimeCreated>

<Projection name="Reference">
<Type>WebAppInstaller</Type>
</Projection>

<Method name="CreateProjection">
<Description>
This method is invoked when a class is compiled.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[cls:%String,&params]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set ns = $NAMESPACE
    zn:ns'="%SYS" "%SYS"
    do ##class(Security.System).GetInstallationSecuritySetting(.security)
    if (security="None") {
        set cspProperties("AutheEnabled") = 64 // Unauthenticated
    } else {
        set cspProperties("AutheEnabled") = 32 // Password
    }
    set cspProperties("NameSpace") = ns
    set cspProperties("Description") = "A WEB application for Cache UML Explorer."
    set cspProperties("IsNameSpaceDefault") = 1
    set cspProperties("DispatchClass") = "UMLExplorer.Router"
    if ('##class(Security.Applications).Exists("/UMLExplorer")) {
        w !, "Creating WEB application ""/UMLExplorer""..."
        set tSC = ##class(Security.Applications).Create("/UMLExplorer", .cspProperties)
        if $$$ISERR(tSC) throw ##class(%Installer.Exception).CreateFromStatus(tSC)
        w !, "WEB application ""/UMLExplorer"" created."
    } else {
        w !, "WEB application ""/UMLExplorer"" already exists, so it is ready to use."
    }
    zn:ns'="%SYS" ns
    quit $$$OK
]]></Implementation>
</Method>

<Method name="RemoveProjection">
<Description>
This method is invoked when a class is 'uncompiled'.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[cls:%String,&params,recompile:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set ns = $NAMESPACE
    zn:ns'="%SYS" "%SYS"
    if (##class(Security.Applications).Exists("/UMLExplorer")) {
        w !, "Deleting WEB application ""/UMLExplorer""..."
        do ##class(Security.Applications).Delete("/UMLExplorer")
        w !, "WEB application ""/UMLExplorer"" was successfully removed."
    }
    zn:ns'="%SYS" ns
    QUIT $$$OK
]]></Implementation>
</Method>
</Class>
</Export>