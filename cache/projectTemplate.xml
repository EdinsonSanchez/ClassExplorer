<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2015.2 (Build 540)" ts="2015-04-12 16:26:04">

<Class name="UMLExplorer.ClassView">
<Description>
Class contains methods that return structured class data.</Description>
<TimeChanged>63668,60898.691763</TimeChanged>
<TimeCreated>63653,67019.989197</TimeCreated>

<Method name="getClassTree">
<Description>
Returns structured class tree with all classes available in current namespace</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set resp = ##class(%ZEN.proxyObject).%New()

    set classes = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:Summary")
    set objects = ##class(%Library.ArrayOfObjects).%New()
    set lastParts = $LB()

    set level = 1
    do objects.SetAt(resp, level)

    do classes.Execute()
    while (classes.Next()) {
        set name = classes.Data("Name")
        set parts = $LISTFROMSTRING(name, ".")
        set i = 0
        while (i < $LISTLENGTH(parts)) && ($LISTGET(lastParts, i + 1) = $LISTGET(parts, i + 1)) {
            set i = i + 1
        }
        set level = i + 1
        set resp = objects.GetAt(level)
        while ($LISTLENGTH(parts) > level) {
            set level = level + 1
            set resp = ##class(%ZEN.proxyObject).%New()
            do objects.GetAt(level - 1).%DispatchSetProperty($LISTGET(parts, level - 1), resp)
            do objects.SetAt(resp, level)
        }
        if ($LISTLENGTH(parts) = level) {
            do resp.%DispatchSetProperty($LISTGET(parts, level), classes.Data("Hidden"))
        }
        set lastParts = parts
    }

    quit objects.GetAt(1)
]]></Implementation>
</Method>

<Method name="getClassData">
<Description>
return structured data about class</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oData:%ZEN.proxyObject,classDefinition:%Dictionary.ClassDefinition</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set oClass = ##class(%ZEN.proxyObject).%New()

    set oProperties = ##class(%ZEN.proxyObject).%New()
    set oClass.NAMESPACE = $NAMESPACE
    set oClass.super = classDefinition.Super
    set oClass.properties = oProperties
    set count = classDefinition.Properties.Count()
    for i = 1:1:count {
        set oProp = ##class(%ZEN.proxyObject).%New()
        set p = classDefinition.Properties.GetAt(i)
        do oProperties.%DispatchSetProperty(p.Name, oProp)
        do oProp.%DispatchSetProperty("private", p.Private)
        do oProp.%DispatchSetProperty("readOnly", p.ReadOnly)
        do oProp.%DispatchSetProperty("type", p.Type)
        do ..collectAggregation(oData, classDefinition.Name, p.Type)
    }

    set oMethods = ##class(%ZEN.proxyObject).%New()
    set oClass.methods = oMethods
    set count = classDefinition.Methods.Count()
    for i = 1:1:count {
        set oMeth = ##class(%ZEN.proxyObject).%New()
        set met = classDefinition.Methods.GetAt(i)
        do oMethods.%DispatchSetProperty(met.Name, oMeth)
        do oMeth.%DispatchSetProperty("private", met.Private)
        do oMeth.%DispatchSetProperty("returns", met.ReturnType)
        do oMeth.%DispatchSetProperty("classMethod", met.ClassMethod)
    }

    set oParameters = ##class(%ZEN.proxyObject).%New()
    set oClass.parameters = oParameters
    set count = classDefinition.Parameters.Count()
    for i = 1:1:count {
        set oPar = ##class(%ZEN.proxyObject).%New()
        set p = classDefinition.Parameters.GetAt(i)
        do oParameters.%DispatchSetProperty(p.Name, oPar)
        do oPar.%DispatchSetProperty("type", p.Type)
    }

    quit oClass
]]></Implementation>
</Method>

<Method name="extendClassFromType">
<ClassMethod>1</ClassMethod>
<FormalSpec>typeName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    return $CASE(typeName,
        "%String": "%Library.String",
        "%Integer": "%Library.Integer",
        "%DataType": "%Library.DataType",
        "%Status": "%Library.Status",
        "%CacheString": "%Library.CacheString",
        "%Persistent": "%Library.Persistent",
        :typeName)
]]></Implementation>
</Method>

<Method name="collectInheritance">
<ClassMethod>1</ClassMethod>
<FormalSpec>oData:%ZEN.proxyObject,baseClassDefinition:%Dictionary.ClassDefinition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set superParts = $LISTFROMSTRING(baseClassDefinition.Super, ",")
    if (oData.inheritance.%DispatchGetProperty(baseClassDefinition.Name) = "") {
        do oData.inheritance.%DispatchSetProperty(baseClassDefinition.Name, ##class(%ZEN.proxyObject).%New())
    }
    set oInherit = oData.inheritance.%DispatchGetProperty(baseClassDefinition.Name)
    for i=1:1:$LISTLENGTH(superParts) {
        set className = ..extendClassFromType($LISTGET(superParts, i))
        do oInherit.%DispatchSetProperty(className, 1)
        if (oData.classes.%DispatchGetProperty(className) = "") {
            set cdef = ##class(%Dictionary.ClassDefinition).%OpenId(className)
            if (cdef '= "") {
                do oData.classes.%DispatchSetProperty(className, ..getClassData(oData, cdef))
                do ..collectInheritance(oData, cdef)
            }
        }
    }
    quit $$$OK
]]></Implementation>
</Method>

<Method name="collectAggregation">
<ClassMethod>1</ClassMethod>
<FormalSpec>oData:%ZEN.proxyObject,className:%String,type:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set classDef = ##class(%Dictionary.ClassDefinition).%OpenId(type)
    if (classDef '= "") {
        set oAgg = oData.aggregation.%DispatchGetProperty(className)
        if (oAgg = "") {
            set oAgg = ##class(%ZEN.proxyObject).%New()
            do oData.aggregation.%DispatchSetProperty(className, oAgg)
        }
    } else { quit $$$OK }

    do oAgg.%DispatchSetProperty(type, "1..1")
    do ..collectClass(oData, classDef)

    quit $$$OK
]]></Implementation>
</Method>

<Method name="collectClass">
<ClassMethod>1</ClassMethod>
<FormalSpec>oData:%ZEN.proxyObject,cdef:%Dictionary.ClassDefinition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    if (oData.classes.%DispatchGetProperty(cdef.Name) '= "") { quit $$$OK }
    do oData.classes.%DispatchSetProperty(cdef.Name, "IDLE")
    do oData.classes.%DispatchSetProperty(cdef.Name, ..getClassData(oData, cdef))
    do ..collectInheritance(oData, cdef)
]]></Implementation>
</Method>

<Method name="getClassView">
<ClassMethod>1</ClassMethod>
<FormalSpec>baseClassDefinition:%Dictionary.ClassDefinition</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set oData = ##class(%ZEN.proxyObject).%New()
    set oData.classes = ##class(%ZEN.proxyObject).%New()
    set oData.inheritance = ##class(%ZEN.proxyObject).%New()
    set oData.aggregation = ##class(%ZEN.proxyObject).%New()
    do ..collectClass(oData, baseClassDefinition)

    quit oData
]]></Implementation>
</Method>

<Method name="getPackageView">
<ClassMethod>1</ClassMethod>
<FormalSpec>rootPackageName:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set oData = ##class(%ZEN.proxyObject).%New()
    set oData.classes = ##class(%ZEN.proxyObject).%New()
    set oData.inheritance = ##class(%ZEN.proxyObject).%New()
    set oData.aggregation = ##class(%ZEN.proxyObject).%New()

    set classes = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:Summary")
    do classes.Execute()
    set listLen = $LISTLENGTH($LISTFROMSTRING(rootPackageName, "."))
    while (classes.Next()) {
        set className = classes.Data("Name")
        set packageName = $LISTTOSTRING($LIST($LISTFROMSTRING(className, "."), 1, listLen), ".")
        if (packageName = rootPackageName) {
            set classDef = ##class(%Dictionary.ClassDefinition).%OpenId(className)
            do oData.classes.%DispatchSetProperty(classDef.Name, ..getClassData(oData, classDef))
            do ..collectInheritance(oData, classDef)
        }
    }

    quit oData
]]></Implementation>
</Method>
</Class>


<Project name="UMLExplorer" LastModified="2015-04-26 00:42:57.542208">
  <Items>
    <ProjectItem name="UMLExplorer.ClassView" type="CLS"/>
    <ProjectItem name="UMLExplorer.Router" type="CLS"/>
    <ProjectItem name="UMLExplorer.StaticContent" type="CLS"/>
  </Items>
</Project>


<Class name="UMLExplorer.Router">
<Description>
REST interface for UMLExplorer</Description>
<Super>%CSP.REST</Super>
<TimeChanged>63667,85509.960346</TimeChanged>
<TimeCreated>63648,30450.187229</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
   <Route Url="/" Method="GET" Call="Index"/>
   <Route Url="/index" Method="GET" Call="Index"/>
   <Route Url="/css/CacheUMLExplorer.css" Method="GET" Call="GetCss"/>
   <Route Url="/js/CacheUMLExplorer.js" Method="GET" Call="GetJs"/>
   <Route Url="/Test" Method="GET" Call="Test"/>
   <Route Url="/GetClassTree" Method="GET" Call="GetClassTree"/>
   <Route Url="/GetClassView/:ClassName" Method="GET" Call="GetClassView"/>
   <Route Url="/GetPackageView/:PackageName" Method="GET" Call="GetPackageView"/>
</Routes>
]]></Data>
</XData>

<Method name="GetClassTree">
<Description>
Method returns whole class tree visible in the current namespace.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ##class(UMLExplorer.ClassView).getClassTree().%ToJSON(, "ou")
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetClassView">
<Description>
Returns classTree by given class name</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set cdef = ##class(%Dictionary.ClassDefinition).%OpenId(className)
    if (cdef = "") quit ..Http404()
    set classData = ##class(UMLExplorer.ClassView).getClassView(cdef)
    do classData.%ToJSON(, "ou")
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetPackageView">
<Description>
Returns all package class trees by given package name</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>packageName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set classData = ##class(UMLExplorer.ClassView).getPackageView(packageName)
    do classData.%ToJSON(, "ou")
    return $$$OK
]]></Implementation>
</Method>

<Method name="Test">
<Description>
Method to test accessibility of REST interface.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set resp = ##class(%ZEN.proxyObject).%New()
    set resp2 = ##class(%ZEN.proxyObject).%New()
    set resp2.Status = "OK"
    set resp.obj = resp2
    do resp.%ToJSON(, "o")
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetCss">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set %response.CharSet = "utf-8"
    set %response.ContentType = "text/css"
    do ##class(UMLExplorer.StaticContent).WriteCSS()
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetJs">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set %response.CharSet = "utf-8"
    set %response.ContentType = "text/javascript"
    do ##class(UMLExplorer.StaticContent).WriteJS()
    return $$$OK
]]></Implementation>
</Method>

<Method name="Index">
<Description>
Method returns user application.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    &html<
    {{replace:html}}
    >
    return $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="UMLExplorer.StaticContent">
<TimeChanged>63663,76108.945861</TimeChanged>
<TimeCreated>63663,71456.865723</TimeCreated>

<Method name="WriteCSS">
<Description>
Outputs css code for UMLExplorer application</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set xdata = ##class(%Dictionary.CompiledXData).%OpenId("UMLExplorer.StaticContent||CSS").Data
    set status=##class(%XML.TextReader).ParseStream(xdata, .textreader)
    while textreader.Read() { if (textreader.NodeType="chars") { w textreader.Value } }
    return $$$OK
]]></Implementation>
</Method>

<Method name="WriteJS">
<Description>
Outputs js code for UMLExplorer application</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set xdata = ##class(%Dictionary.CompiledXData).%OpenId("UMLExplorer.StaticContent||JS").Data
    set status=##class(%XML.TextReader).ParseStream(xdata, .textreader)
    while textreader.Read() { if (textreader.NodeType="chars") { w textreader.Value } }
    return $$$OK
]]></Implementation>
</Method>

<XData name="CSS">
<Data><![CDATA[
<data>
{{replace:css}}
</data>
]]></Data>
</XData>

<XData name="JS">
<Data><![CDATA[
<data><![CDATA[
{{replace:js}}
]]]]><![CDATA[></data>
]]></Data>
</XData>
</Class>
</Export>